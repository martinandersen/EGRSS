function [Ut,Vt] = egrss_generators(t, p)
% EGRSS_GENERATORS   Computes generator representation of p'th order spline
% kernel matrix generated by a strictly monotonic vector t of length n.
%
% [Ut,Vt] = EGRSS_GENERATORS(t,p) returns two matrices Ut and Vt of size
% p-by-n (with p > 0) such that K = tril(Ut'*Vt) + triu(Vt'*Ut,1) is the kernel
% matrix with elements
%
%    K(i,j) = sum_{k=0}^{p-1} (-1)^k/(factorial(p-1-k)*factorial(p+k)
%                *(t(i)*t(j))^(p-1-k)*min(t(i),t(j))^(2*k+1)
%
% where t is a nonnegative vector.
%
% See also: EGRSS_SYMV, EGRSS_POTRF, EGRSS_FULL

% Check inputs
assert(p > 0,'p must be positive')
assert(p == floor(p),'p must be an integer')
assert(isscalar(p),'p must be a scalar')
assert(isvector(t),'t must be a vector')
assert(all(t>=0),'t must be a nonnegative vector')
isOctave = exist('OCTAVE_VERSION', 'builtin') ~= 0;

% Check monotonicity
if all(diff(t) > 0)
    monotonic = 1;
elseif all(diff(t) < 0)
    monotonic = -1;
else
    error('t must be strictly monotonic')
end

% Convert t to a row vector if it is a column vector
if iscolumn(t)
    t = t';
end

% Build Ut and Vt
if monotonic == 1
    % t is monotonic increasing
    if ~isOctave && verLessThan('matlab', '9.1')
        Ut = bsxfun(@times, bsxfun(@power, repmat(t,p,1), [p-1:-1:0]'), 1./factorial([p-1:-1:0]'));
        Vt = bsxfun(@times, bsxfun(@power, repmat(t,p,1), [p:2*p-1]'), ((-1).^([0:p-1]'))./factorial([p:2*p-1]'));
    else
        Ut = (repmat(t,p,1).^([p-1:-1:0]'))./factorial([p-1:-1:0]');
        Vt = (repmat(t,p,1).^([p:2*p-1]')).*(((-1).^[0:p-1]')./factorial([p:2*p-1]'));
    end
else
    % t is monotonic decreasing (switch Ut and Vt)
    if ~isOctave && verLessThan('matlab', '9.1')
        Vt = bsxfun(@times, bsxfun(@power, repmat(t,p,1), [p-1:-1:0]'), 1./factorial([p-1:-1:0]'));
        Ut = bsxfun(@times, bsxfun(@power, repmat(t,p,1), [p:2*p-1]'), ((-1).^([0:p-1]'))./factorial([p:2*p-1]'));
    else
        Vt = (repmat(t,p,1).^([p-1:-1:0]'))./factorial([p-1:-1:0]');
        Ut = (repmat(t,p,1).^([p:2*p-1]')).*(((-1).^[0:p-1]')./factorial([p:2*p-1]'));
    end
end
end
